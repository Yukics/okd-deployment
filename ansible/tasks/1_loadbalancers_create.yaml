---
- name: Get this hosts ssh public keys
  ansible.builtin.shell: |
    cat ~/.ssh/*.pub
  register: my_sshkeys

- name: Add my ssh keys to fact
  ansible.builtin.set_fact:
    my_sshkeys: my_sshkeys.stdout

- name: Async create loadbalancer VMs
  community.general.proxmox_kvm:
    api_user: "{{ proxmox_api_user }}"
    api_password: "{{ proxmox_api_password }}"
    api_host: "{{ proxmox_api_host }}"
    api_port: "{{ proxmox_api_port }}"
    validate_certs: false
    node: "{{ item.node }}"
    vmid: "{{ item.template.id }}"
    clone: "{{ item.template.name }}"
    newid: "{{ item.id }}"
    name: "{{ item.name }}"
    full: true
    state: present
    timeout: 90
  loop: "{{ loadbalancer }}"
  loop_control:
    label: "{{ item.name }}"
  async: 90
  poll: 0
  register: vm_creation

- name: Check VM creation
  ignore_errors: true
  no_log: true
  async_status:
    jid: "{{ async_result_item.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  retries: 90
  delay: 4
  loop: "{{ vm_creation.results }}"
  loop_control:
    loop_var: "async_result_item"

- name: "Pause for 2s, wait for VM creation"
  ansible.builtin.pause:
    seconds: 2

- name: Configure cloned VM
  community.general.proxmox_kvm:
    api_user: "{{ proxmox_api_user }}"
    api_password: "{{ proxmox_api_password }}"
    api_host: "{{ proxmox_api_host }}"
    api_port: "{{ proxmox_api_port }}"
    validate_certs: false
    node: "{{ item.node }}"
    vmid: "{{ item.id }}"
    name: "{{ item.name }}"
    tags:
      - okd
      - lb
    agent: enabled=1
    cores: "{{ item.cores }}"
    cpu: "host"
    memory: "{{ item.memory }}"
    balloon: 0
    storage: "{{ proxmox_disk_storage }}"
    autostart: true
    onboot: true
    timeout: 90
    update: true
  loop: "{{ loadbalancer }}"
  loop_control:
    label: "{{ item.name }}"

- name: "Pause for 2s, wait for configuration to get applied"
  ansible.builtin.pause:
    seconds: 2

- name: Update cloned VM with Cloud-init
  community.general.proxmox_kvm:
    api_user: "{{ proxmox_api_user }}"
    api_password: "{{ proxmox_api_password }}"
    api_host: "{{ proxmox_api_host }}"
    api_port: "{{ proxmox_api_port }}"
    validate_certs: false
    node: "{{ item.node }}"
    vmid: "{{ item.id }}"
    name: "{{ item.name }}"
    ciuser: "{{ item.user }}"
    cipassword: "{{ item.password }}"
    sshkeys: "{{ sshkeys | join ('\n') }}"
    boot: "order=scsi0;ide2"
    ipconfig:
      ipconfig0: "ip={{ item.ip }}/24,gw={{ gateway }}"
    nameservers: "{{ dns }}"
    searchdomains: "{{ searchdomain }}"
    timeout: 90
    update: true
  loop: "{{ loadbalancer }}"
  loop_control:
    label: "{{ item.name }}"

- name: "Pause for 2s, wait for cloud-init to get applied"
  ansible.builtin.pause:
    seconds: 2

- name: Start loadbalancer VM
  community.general.proxmox_kvm:
    api_user: "{{ proxmox_api_user }}"
    api_password: "{{ proxmox_api_password }}"
    api_host: "{{ proxmox_api_host }}"
    api_port: "{{ proxmox_api_port }}"
    node: "{{ item.node }}"
    name: "{{ item.name }}"
    timeout: 90
    state: started
  loop: "{{ loadbalancer }}"
  loop_control:
    label: "{{ item.name }}"
  async: 120
  poll: 0

- name: Wait for port 22 to become open and contain "OpenSSH"
  ansible.builtin.wait_for:
    port: 22
    host: '{{ item.ip }}'
    search_regex: OpenSSH
    delay: 1
    timeout: 600
  loop: '{{ loadbalancer }}'
  loop_control:
    label: "{{ item.name }}"

- name: Remove cloud-init drive
  community.general.proxmox_disk:
    api_user: "{{ proxmox_api_user }}"
    api_password: "{{ proxmox_api_password }}"
    api_host: "{{ proxmox_api_host }}"
    api_port: "{{ proxmox_api_port }}"
    validate_certs: false
    vmid: '{{item.id}}'
    disk: 'ide2'
    state: absent
  loop: '{{ loadbalancer }}'
  loop_control:
    label: "{{ item.name }}"

- name: Add new hosts to pb execution
  add_host: 
    name: "{{ item.name }}.{{ cluster_name }}.{{ searchdomain }}" 
    ansible_ssh_host: "{{ item.ip }}" 
    groups: loadbalancer_hosts
    ansible_user: "{{ item.user }}"
  loop: "{{ loadbalancer }}"
  loop_control:
    label: "{{ item.name }}"