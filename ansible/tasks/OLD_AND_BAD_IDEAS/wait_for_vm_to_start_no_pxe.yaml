# - name: "Get count ignition requests {{ item.name }}"
#   ansible.builtin.shell: echo $(($(curl -s "http://192.168.69.230:8404/stats;csv" | grep ignition-1 | cut -d, -f8)+6))
#   register: initial_req
#   args:
#     executable: /bin/bash

# - name: "Get current requests until it completed an installation cycle {{ item.name }}"
#   ansible.builtin.shell: curl -s "http://192.168.69.230:8404/stats;csv" | grep ignition-1 | cut -d, -f8
#   register: current_req
#   until: 'initial_req.stdout < current_req.stdout'
#   retries: 280
#   delay: 1

# - name: "Stop VM with force {{ item.name }}"
#   community.general.proxmox_kvm:
#     api_user: "{{ proxmox_api_user }}"
#     api_password: "{{ proxmox_api_password }}"
#     api_host: "{{ proxmox_api_host }}"
#     api_port: "{{ proxmox_api_port }}"
#     validate_certs: false
#     timeout: 1
#     node: "{{ item.node }}"
#     vmid: "{{ item.id }}"
#     name: "{{ item.name }}"
#     state: stopped
#     force: true

# - name: "Wait for VM to not be running {{ item.name }}"
#   community.general.proxmox_vm_info:
#     api_user: "{{ proxmox_api_user }}"
#     api_password: "{{ proxmox_api_password }}"
#     api_host: "{{ proxmox_api_host }}"
#     api_port: "{{ proxmox_api_port }}"
#     validate_certs: false
#     type: qemu
#     vmid: "{{ item.id }}"
#     config: current
#   register: vm_status
#   until: 'vm_status.proxmox_vms[0].status == "stopped"'
#   retries: 60
#   delay: 4

# - name: "Start VM with force {{ item.name }}"
#   community.general.proxmox_kvm:
#     api_user: "{{ proxmox_api_user }}"
#     api_password: "{{ proxmox_api_password }}"
#     api_host: "{{ proxmox_api_host }}"
#     api_port: "{{ proxmox_api_port }}"
#     validate_certs: false
#     node: "{{ item.node }}"
#     vmid: "{{ item.id }}"
#     name: "{{ item.name }}"
#     state: started
#     force: true

# - include_tasks: tasks/8_proxmox_create_bootstrap.yaml
#   when: "total_created_okd != total_okd"

# - name: Add new hosts to pb execution
#   add_host: 
#     name: "{{ item.name }}.{{ domain }}" 
#     ansible_ssh_host: "{{ item.ip }}" 
#     groups: bootstrap_hosts
#     ansible_user: "core"
#   loop: "{{ vm_list"total_created_okd

# - name: Pause for 1 minute, wait VM to start
#   ansible.builtin.pause:
#     minutes: 1

# - name: Get controlplane VM MAC addresses
#   community.general.proxmox_vm_info:
#     api_user: "{{ proxmox_api_user }}"
#     api_password: "{{ hostvars['localhost']['proxmox_api_password'] }}"
#     api_host: "{{ proxmox_api_host }}"
#     api_port: "{{ proxmox_api_port }}"
#     validate_certs: false
#     node: "{{ item.node }}"
#     name: "{{ item.name }}"
#     config: current
#   loop: "{{ controlplane }}"
#   register: created_controlplanes

# - name: Retrieve IP from KEA DHCP opnsense
#   ansible.builtin.uri:
#     url: http://{{ opnsense_host }}:{{ opnsense_kea_dhcp_port }}
#     method: POST
#     body_format: json
#     status_code: [200]
#     return_content: true
#     headers:
#       Content-Type: application/json
#     body: |
#       {
#           "command": "lease4-get",
#           "service": [ "dhcp4" ], 
#           "arguments": {
#               "identifier-type": "hw-address",
#               "identifier": "{{ item.proxmox_vms[0].config.net0 | split(",") | first | split("=") | last }}",
#               "subnet-id": {{ opnsense_kea_dhcp_subnet_id }}
#           }
#       }
#   loop: "{{ created_controlplanes.results }}"
#   register: controlplanes_leases

# - name: Set list of IP leased by DHCP
#   set_fact: 
#     controlplanes_ips: "{{ controlplanes_ips | default([]) + [item.json[0].arguments['ip-address']] }}"
#   loop: "{{ controlplanes_leases.results }}"

# - name: Set list of VM info
#   set_fact: 
#     created_controlplanes: "{{ created_controlplanes.results }}"

# - name: Add new controlplane hosts to pb execution
#   add_host: 
#     name: "{{ item.1.name }}.{{ domain }}" 
#     ansible_ssh_host: "{{ item.0 }}" 
#     groups: controlplane_hosts
#     ansible_user: "root"
#   loop: "{{ controlplanes_ips | zip(controlplane) | list }}"

# - name: Download public key to new core os VM and dependencies
#   pause:
#     prompt: |
#       Execute as root (sudo su): 
#         nmcli --offline connection add type ethernet con-name "Wired Connection 1" \
#         connection.autoconnect true \
#         connection.uuid "$(nmcli conn show | grep -v lo | tail -1 | awk '{print $4}')" \
#         connection.type "802-3-ethernet" \
#         ipv4.addresses "<IP address>/<CIDR>" \
#         ipv4.gateway "{{ gateway }}" \
#         ipv4.dns "{{ dns | join(',') }}" \
#         ipv4.dns-search "{{ searchdomain }}" \
#         ipv4.method manual > /root/ens18.nmconnection

#         URL="http:/{{ loadbalancer }}:8000/bootstrap.ign"
#         SHA512=$(curl $URL | sha512sum)
#         coreos-installer install --ignition-url=$URL /dev/sda --ignition-hash=sha512-$SHA512 --network-keyfile /root/ens18.nmconnection
      
#       Press Ctrl+c and the "c" to resume or "a" to abort