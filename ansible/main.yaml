---
# TODO: install venv and needed utilities

# ? DNS
# - name: Setup DNS registers opnsense
#   hosts: localhost
#   connection: local
#   gather_facts: no
#   module_defaults:
#     group/ansibleguy.opnsense.all:
#       firewall: '{{ opnsense_host }}'
#       api_key: '{{ opnsense_key }}'
#       api_secret: '{{ opnsense_secret }}'
#       ssl_verify: false
#     ansibleguy.opnsense.list:
#       target: 'bind_general'
#   vars_files:
#     - conf/opnsense.yaml
#     - conf/infra.yaml
#   tasks:
#     - include_tasks: tasks/0_opnsense_bind_dns.yaml

# ? LOADBALANCERS VM
- name: Loadbalancers VM creation
  hosts: localhost
  connection: local
  gather_facts: false
  vars_files:
    - conf/proxmox.yaml
    - conf/infra.yaml
  tasks:
    - name: Create infrastructure
      include_tasks: tasks/1_loadbalancers_create.yaml

- name: Configure keepalived
  hosts: loadbalancer_hosts
  become: true
  vars_files:
    - conf/infra.yaml
  tasks:
    - include_tasks: tasks/2_loadbalancers_keepalived.yaml

- name: Configure haproxies
  hosts: loadbalancer_hosts
  become: true
  vars_files:
    - conf/infra.yaml
  tasks:
    - include_tasks: tasks/3_loadbalancers_haproxy.yaml

- name: Disable cloud-init service and download/install oc on loadbalancer VM
  hosts: loadbalancer_hosts
  become: true
  vars_files:
    - conf/infra.yaml
    - conf/redhat.yaml
  roles:
    - kwoodson.yedit
  tasks:
    - include_tasks: tasks/4_loadbalancers_cli.yaml

- name: Configure iPXE
  hosts: loadbalancer_hosts
  become: true
  vars_files:
    - conf/infra.yaml
  tasks:
    - include_tasks: tasks/5_loadbalancers_ipxe.yaml

- name: Configuration OKD files preparation
  hosts: loadbalancer_hosts
  become: true
  vars_files:
    - conf/infra.yaml
    - conf/redhat.yaml
  roles:
  - kwoodson.yedit
  tasks:
    - include_tasks: tasks/6_loadbalancers_generate_okd_conf.yaml

- name: Install fastapi http-ignition
  hosts: loadbalancer_hosts
  become: true
  vars_files:
    - conf/infra.yaml
    - conf/redhat.yaml
  tasks:
    - include_tasks: tasks/7_loadbalancers_install_http_ignition.yaml

#? OKD CREATION
# - name: OKD Bootstrap VM creation
#   hosts: localhost
#   connection: local
#   gather_facts: false
#   vars_files:
#     - conf/proxmox.yaml
#     - conf/infra.yaml
#   tasks:
#     - include_tasks: tasks/8_proxmox_create_okd_vm.yaml
#       vars:
#         okd_type: "bootstrap"
#         okd_vm: "{{ bootstrap }}"

# - name: OKD wait for bootstrap to complete
#   hosts: loadbalancer_hosts
#   become: true
#   vars_files:
#     - conf/infra.yaml
#     - conf/redhat.yaml
#   tasks:
#     - name: Wait for bootstrap to complete
#       when: 'loadbalancer[0].name in inventory_hostname'
#       ansible.builtin.shell: |
#         cd /root/installation
#         while true; do
#           ../openshift-install wait-for bootstrap-complete | grep 'Bootstrap Complete'
#           # expect errors, timeout, keep going sometimes
#           [ $? -eq 0 ] && break
#         done

- name: OKD Bootstrap wait until 22623 and 6443 are exposed
  hosts: localhost
  connection: local
  gather_facts: false
  vars_files:
    - conf/infra.yaml
  tasks:
    - name: Check bootstrap config/master
      ignore_errors: true
      ansible.builtin.uri:
        validate_certs: false
        method: GET
        url: "https://{{ loadbalancer_ip }}:22623/config/master"
      register: check_ignition
      until: 'check_ignition.status == 200'
      retries: 120
      delay: 30
    - name: Check api server is working
      ignore_errors: true
      ansible.builtin.uri:
        validate_certs: false
        method: GET
        url: "https://{{ loadbalancer_ip }}:6443/readyz"
      register: check_ignition
      until: 'check_ignition.status == 200'
      retries: 120
      delay: 30

- name: OKD Controlplane VM creation
  hosts: localhost
  connection: local
  gather_facts: false
  vars_files:
    - conf/proxmox.yaml
    - conf/infra.yaml
  tasks:
    - include_tasks: tasks/8_proxmox_create_okd_vm.yaml
      vars:
        okd_type: "controlplane"
        okd_vm: "{{ controlplane }}"

- name: Check until bootstrap is finished
  hosts: loadbalancer_hosts
  become: true
  vars_files:
    - conf/infra.yaml
  tasks:
    - include_tasks: tasks/9_okd_wait_bootstrap_finished.yaml

- name: Stop and delete bootstrap VM, no longer needed
  hosts: localhost
  connection: local
  gather_facts: false
  vars_files:
    - conf/proxmox.yaml
    - conf/infra.yaml
  tasks:
    - include_tasks: tasks/99_stop_and_destroy_vm.yaml
      vars:
        okd_vm: "{{ bootstrap }}"

- name: OKD Workers VM creation
  hosts: localhost
  connection: local
  gather_facts: false
  vars_files:
    - conf/proxmox.yaml
    - conf/infra.yaml
  tasks:
    - set_fact:
        vm_list: "{{ compute + infra + storage + monitoring }}"
    - include_tasks: tasks/8_proxmox_create_okd_vm.yaml
      vars:
        okd_type: "worker"
        okd_vm: "{{ vm_list }}"

- name: OKD initial tasks
  hosts: loadbalancer_hosts
  become: true
  vars_files:
    - conf/infra.yaml
  tasks:
    - include_tasks: tasks/10_okd_initial_tasks.yaml

- name: OKD sertup rook-ceph
  hosts: loadbalancer_hosts
  become: true
  vars_files:
    - conf/infra.yaml
  tasks:
    - include_tasks: tasks/11_okd_setup_data_foundations.yaml